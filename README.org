* Zephyr Module example and template

This is a sample and template code for Zephyr's module system.  This
repository's aim is to support developers who want to integrate an
existing code as a Zephyr module.

For anyone want to work with Zephyr modules, please read [[https://docs.zephyrproject.org/latest/guides/modules.html][the official
document]] first.

* Given

  - This repository have a sample library, libsample, which we want to
    integrate to Zephyr as a module.

  - libsample has two functions
    - sample_pure() does not use any Zephyr facility at all.  It does
      its own calculation and return. If this is the case for all
      functions in your code, it's simple.
    - sample_zephyr() uses Zephyr facility and you need to take care a
      few more bits.

  - libsample is bulidable for both Linux and Zephyr and we want to
    target both native_posix and qemu_cortex_m3.

  - The build system for this repository is CMake.  A Zephyr module
    must have a working CMake build script.  If code is based on Meson,
    GNU Make, or any other build system, you must first port to CMake.

  - We use the [[https://docs.zephyrproject.org/latest/guides/west/workspaces.html#t2-star-topology-application-is-the-manifest-repository][T2 Start topology for our application]].

* Build as Zephyr module

  At first, you should make libsample bulid by the Zephyr's build
  system.  You need to tell libsample to the build system as a module,
  and tell how to build it.

  This allows us to test the library is buildable with your target
  compilers.

** Add as a module

To do so, you must add an entry about the library in the application's
=west.yml=.

#+begin_src yaml
  - name: module-sample
    url: https://github.com/yashi/module-sample
    revision: main
    path: modules/lib/sample
#+end_src

With this entry, West can now list module-sample as a module.  You can
check it with =west list=.

#+begin_example
  $ west list
  manifest     module-app                   HEAD                                     N/A
  zephyr       zephyr                       main                                     https://github.com/zephyrproject-rtos/zephyr
  cmsis        modules/hal/cmsis            b0612c97c1401feeb4160add6462c3627fe90fc7 https://github.com/zephyrproject-rtos/cmsis
  module-sample modules/lib/sample           main                                     https://github.com/yashi/module-sample
#+end_example

West now recognize it as a module but it doesn't build it at all
because it's not told to do so.

Zephyr's build system will load module's =CMakeLists.txt=, which is
=zephyr/CMakeLists.txt= as the default.  You can change the location
of the file.  We'll talk about it later.

** Tell the build system to build

If you just want to _bulid_ the library, add the following like in the
=zephyr/CMakeLists.txt=.

#+begin_src cmake
  add_subdirectory(.. build)
#+end_src

This tells

  - Add the the library's root directory (because we are in =zephyr/=
    directory) as a sub directory to build.
  - Because =..= is not a sub directory of the current directory
    =zephyr/=, CMake will complain if you omit the second binary
    directory parameter.  So this must be set.  The name of the binary
    directory can be of your choise.
    #+begin_example
      CMake Error at .../module-workspace/modules/lib/sample/zephyr/CMakeLists.txt:1 (add_subdirectory):
	add_subdirectory not given a binary directory but the given source
	directory ".../module-workspace/modules/lib/sample" is not a
	subdirectory of	".../module-workspace/modules/lib/sample/zephyr".  When
	specifying an out-of-tree source a binary directory must be explicitly
	specified.
    #+end_example

With this line, you see that libsample is built when you build your
application.  You see the build steps increase.

#+begin_example
  $ west build -b native_posix_64 module-app
    :
  [95/95] Linking C executable zephyr/zephyr.elf
#+end_example

#+begin_example
  $ west build -b native_posix_64 module-app
    :
  [97/97] Linking C executable zephyr/zephyr.elf
#+end_example

** Conditional compilation whth Kconfig

It does build it but we are not using it at all.  Plus, we want to
control when to build libsample or not just like any other features in
Zephyr eco system.

It's the same as the Zephyr proper.  We'll use =if(CONFIG_LIBSAMPLE)=
and =Kconfig= constructs.

#+begin_src cmake
  if(CONFIG_LIBSAMPLE)
    add_subdirectory(.. build)
  endif()
#+end_src

#+begin_src kconfig
  config LIBSAMPLE
	  bool "Enable libsample"
	  help
	    This option enables the libsample as a Zephyr module.
#+end_src

With these changes, libsample will show up in the menuconfig, you can
build your app with =-DCONFIG_LIBSAMPLE=y=, or you can control it with
=prj.conf= as usual.

#+begin_example
  Modules  --->

    ,*** Available modules. ***
    sample (/home/yashi/src/module-workspace/modules/lib/sample)  --->

      [ ] Enable libsample
#+end_example

#+begin_example
  $ west build -b native_posix_64 module-app -- -DCONFIG_LIBSAMPLE=y
#+end_example

#+begin_src conf
  CONFIG_LIBSAMPLE=y
#+end_src

** Build it with your target compilers

   Now we can test buliding libsample with your target board and
   target compilers.  We'll use =qemu_cortex_m3= and =native_posix_64=
   as examples, but you should make sure your library is built by your
   configuraiton.

   To see how the library is built, you should use =-v= option to
   =west= command.

   #+begin_example
     $ west -v build -b native_posix_64 module-app -- -DCONFIG_LIBSAMPLE=y
       :
     [2/135] ccache /home/yashi/zephyr-sdk-0.13.1/arm-zephyr-eabi/bin/arm-zephyr-eabi-gcc  -I/home/yashi/src/module-workspace/modules/lib/sample/include -Wall -Wextra -std=gnu11 -MD -MT modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj -MF modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj.d -o modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj -c /home/yashi/src/module-workspace/modules/lib/sample/src/plain.c
     [3/135] : && ccache /usr/bin/cmake -E rm -f modules/sample/build/libsample.a && ccache /home/yashi/zephyr-sdk-0.13.1/arm-zephyr-eabi/bin/arm-zephyr-eabi-ar qc modules/sample/build/libsample.a  modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj && ccache /home/yashi/zephyr-sdk-0.13.1/arm-zephyr-eabi/bin/arm-zephyr-eabi-ranlib modules/sample/build/libsample.a && :
   #+end_example

   #+begin_example
     $ west -v build -b native_posix_64 module-app -- -DCONFIG_LIBSAMPLE=y
     [1/97] ccache /usr/lib/ccache/gcc  -I/home/yashi/src/module-workspace/modules/lib/sample/include -Wall -Wextra -std=gnu11 -MD -MT modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj -MF modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj.d -o modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj -c /home/yashi/src/module-workspace/modules/lib/sample/src/plain.c
     [2/97] cd /home/yashi/src/module-workspace/build/zephyr && /usr/bin/cmake -E echo

     [3/97] : && ccache /usr/bin/cmake -E rm -f modules/sample/build/libsample.a && ccache /usr/bin/ar qc modules/sample/build/libsample.a  modules/sample/build/CMakeFiles/sample.dir/src/plain.c.obj && ccache /usr/bin/ranlib modules/sample/build/libsample.a && :

   #+end_example

   An experienced user might notice that the built timing is way too
   early, before the essential builds in the build system.  This will
   be a problem if your library depends on Zephyr proper.  We'll cover
   that later.

   Make sure your library is built with compiler options you want to
   use.  You should also make sure that your library is _not_ using
   any compiler options and flags a Zephyr application would normally
   built with.  This is because we haven't tell to do so.  If your
   library doesn't depend on Zephyr, you don't need any compiler
   option from Zephyr.  If it uses and depends on Zephyr, that is your
   library uses Zephyr semaphore or logging subsystem, you must tell
   additional flags while building your library.  We'll cover this
   later.

* ToDo

 - [ ] Support autoconf.h
 - [ ] Support -std=gnu11
 - [ ] Support its own cflags
